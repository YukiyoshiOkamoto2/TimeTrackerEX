import { Editor } from "@/components/editor";
import { appMessageDialogRef } from "@/components/message-dialog";
import { getSettingErrors, SettingJSON, type ObjectSettingValueInfo, type ObjectType } from "@/schema";
import { Button, makeStyles, tokens } from "@fluentui/react-components";
import { Dismiss20Regular, Save20Regular } from "@fluentui/react-icons";
import { useEffect, useState } from "react";
import { SettingSection } from "../../layout";
import { SettingErrorsSummary } from "../../ui";

const useStyles = makeStyles({
    editor: {
        height: "420px",
    },
    actions: {
        display: "flex",
        justifyContent: "flex-end",
        gap: tokens.spacingHorizontalM,
        marginTop: tokens.spacingVerticalL,
    },
    errorSection: {
        marginBottom: tokens.spacingVerticalL,
    },
});

export type JsonEditorViewProps<T extends ObjectType> = {
    /** Ë®≠ÂÆöÂÆöÁæ© */
    definition: ObjectSettingValueInfo;
    /** ÁèæÂú®„ÅÆË®≠ÂÆöÂÄ§ */
    value: T;
    /** ‰øùÂ≠òÊôÇ„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ */
    onSave: (value: T) => void;
    /** „Ç≠„É£„É≥„Çª„É´ÊôÇ„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ */
    onCancel: () => void;
};

export function JsonEditorView<T extends ObjectType>({ definition, value, onSave, onCancel }: JsonEditorViewProps<T>) {
    const styles = useStyles();
    const [jsonText, setJsonText] = useState(() => JSON.stringify(value, null, 2));
    const [allErrors, setAllErrors] = useState(() => getSettingErrors(value, definition));

    const hasError = allErrors.length > 0;

    useEffect(() => {
        const result = SettingJSON.parse(jsonText);
        if (result.isError) {
            setAllErrors([
                {
                    id: "JSON",
                    label: "üê∑ JSON„Éë„Éº„Ç∫„Ç®„É©„Éº",
                    message: result.errorMessage,
                },
            ]);
        } else {
            setAllErrors(getSettingErrors(result.value, definition));
        }
    }, [jsonText, definition, value]);

    const handleSave = () => {
        if (hasError) {
            return;
        }

        let error;
        const result = SettingJSON.parse(jsonText);
        if (result.isError) {
            error = result.errorMessage;
        } else {
            const check = getSettingErrors(result.value, definition);
            if (check.length === 0) {
                onSave(result.value as T);
            } else {
                error = check.map((e) => e.message).join("\n");
            }
        }
        if (error) {
            appMessageDialogRef.showMessageAsync("üê∑ JSON„Éë„Éº„Ç∫„Ç®„É©„Éº", error, "ERROR");
        }
    };

    const handleEditorChange = (newValue: string) => {
        setJsonText(newValue);
    };

    return (
        <SettingSection
            title="JSONË®≠ÂÆö"
            description="Ë®≠ÂÆö„ÇíJSONÂΩ¢Âºè„ÅßÁõ¥Êé•Á∑®ÈõÜ„Åß„Åç„Åæ„Åô„ÄÇ‰∏çÊ≠£„Å™JSONÂΩ¢Âºè„Åß‰øùÂ≠ò„Åô„Çã„Å®„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅåÊ≠£Â∏∏„Å´Âãï‰Ωú„Åó„Å™„ÅÑÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ"
        >
            {/* „Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Ç®„É©„ÉºË°®Á§∫ */}
            {hasError && <SettingErrorsSummary errors={allErrors} title="Ê§úË®º„Ç®„É©„Éº" />}

            {/* „Ç®„Éá„Ç£„Çø */}
            <Editor className={styles.editor} value={jsonText} language="json" onTextChanged={handleEditorChange} />

            {/* „Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥ */}
            <div className={styles.actions}>
                <Button appearance="secondary" icon={<Dismiss20Regular />} onClick={onCancel}>
                    „Ç≠„É£„É≥„Çª„É´
                </Button>
                <Button appearance="primary" icon={<Save20Regular />} onClick={handleSave} disabled={hasError}>
                    ‰øùÂ≠ò
                </Button>
            </div>
        </SettingSection>
    );
}
